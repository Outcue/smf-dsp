/**
   Letter sprites borrowed from fmplayer (BSD-2-Clause License)
     https://github.com/takamichih/fmplayer

   based on file `fmdsp/fmdsp_sprites.h`
   - `s_logo_fm`
   - `s_logo_ds`
   - `s_logo_p`
 */

#include <SDL.h>
#include <map>
#include <array>
#include <vector>
#include <cstdint>

enum {
    Width = 50,
    Height = 50,
};

static const uint8_t Sprite[Width * Height] = {

0, 0,9,2,2,2,2,2,2,2,2,2,2,2,2,2, 0,  0,9,2,2,2,0,0,0,0,0,2,2,2,9,0, 0,  0,9,2,2,2,2,2,2,2,2,2,2,2,2,0, 0,0,
0, 9,2,2,2,2,2,2,2,2,2,2,2,2,2,2, 0,  9,2,2,2,2,2,0,0,0,2,2,2,2,2,9, 0,  9,2,2,2,2,2,2,2,2,2,2,2,2,2,0, 0,0,
0, 2,2,2,9,3,3,3,3,3,3,3,3,3,3,3, 0,  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2, 0,  2,2,2,9,3,3,3,3,3,3,3,3,3,3,0, 0,0,
0, 2,2,2,0,0,0,0,0,0,0,0,0,0,0,0, 0,  2,2,2,0,0,2,2,2,2,2,0,0,2,2,2, 0,  2,2,2,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,
0, 2,2,2,9,0,0,0,0,0,0,0,0,0,0,0, 0,  2,2,2,0,0,0,2,2,2,0,0,0,2,2,2, 0,  2,2,2,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,
0, 9,2,2,2,2,2,2,2,2,2,2,2,2,9,0, 0,  2,2,2,0,0,0,0,0,0,0,0,0,2,2,2, 0,  2,2,2,2,2,2,2,2,2,2,2,2,0,0,0, 0,0,
0, 0,9,2,2,2,2,2,2,2,2,2,2,2,2,9, 0,  2,2,2,0,0,0,0,0,0,0,0,0,2,2,2, 0,  2,2,2,2,2,2,2,2,2,2,2,2,0,0,0, 0,0,
0, 0,0,0,3,3,3,3,3,3,3,3,9,2,2,2, 0,  2,2,2,0,0,0,0,0,0,0,0,0,2,2,2, 0,  2,2,2,3,3,3,3,3,3,3,3,3,0,0,0, 0,0,
0, 0,0,0,0,0,0,0,0,0,0,0,0,2,2,2, 0,  2,2,2,0,0,0,0,0,0,0,0,0,2,2,2, 0,  2,2,2,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,
0, 0,0,0,0,0,0,0,0,0,0,0,9,2,2,2, 0,  2,2,2,0,0,0,0,0,0,0,0,0,2,2,2, 0,  2,2,2,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,
0, 2,2,2,2,2,2,2,2,2,2,2,2,2,2,9, 0,  2,2,2,0,0,0,0,0,0,0,0,0,2,2,2, 0,  2,2,2,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,
0, 2,2,2,2,2,2,2,2,2,2,2,2,2,9,0, 0,  2,2,2,0,0,0,0,0,0,0,0,0,2,2,2, 0,  2,2,2,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,

0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,
0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,
0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,
0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,
0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,

0, 2,2,2,2,2,2,2,2,2,2,2,2,9,0,0, 0,  0,9,2,2,2,2,2,2,2,2,2,2,2,2,2, 0,  2,2,2,2,2,2,2,2,2,2,2,2,2,9,0, 0,0,
0, 2,2,2,2,2,2,2,2,2,2,2,2,2,2,0, 0,  9,2,2,2,2,2,2,2,2,2,2,2,2,2,2, 0,  2,2,2,2,2,2,2,2,2,2,2,2,2,2,9, 0,0,
0, 2,2,2,3,3,3,3,3,3,3,3,9,2,2,9, 0,  2,2,2,9,3,3,3,3,3,3,3,3,3,3,3, 0,  2,2,2,3,3,3,3,3,3,3,3,9,2,2,2, 0,0,
0, 2,2,2,0,0,0,0,0,0,0,0,0,2,2,2, 0,  2,2,2,0,0,0,0,0,0,0,0,0,0,0,0, 0,  2,2,2,0,0,0,0,0,0,0,0,0,2,2,2, 0,0,
0, 2,2,2,0,0,0,0,0,0,0,0,0,2,2,2, 0,  2,2,2,9,0,0,0,0,0,0,0,0,0,0,0, 0,  2,2,2,0,0,0,0,0,0,0,0,9,2,2,2, 0,0,
0, 2,2,2,0,0,0,0,0,0,0,0,0,2,2,2, 0,  9,2,2,2,2,2,2,2,2,2,2,2,2,9,0, 0,  2,2,2,2,2,2,2,2,2,2,2,2,2,2,9, 0,0,
0, 2,2,2,0,0,0,0,0,0,0,0,0,2,2,2, 0,  0,9,2,2,2,2,2,2,2,2,2,2,2,2,9, 0,  2,2,2,2,2,2,2,2,2,2,2,2,2,9,0, 0,0,
0, 2,2,2,0,0,0,0,0,0,0,0,0,2,2,2, 0,  0,0,0,3,3,3,3,3,3,3,3,9,2,2,2, 0,  2,2,2,3,3,3,3,3,3,3,3,3,3,0,0, 0,0,
0, 2,2,2,0,0,0,0,0,0,0,0,0,2,2,2, 0,  0,0,0,0,0,0,0,0,0,0,0,0,2,2,2, 0,  2,2,2,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,
0, 2,2,2,0,0,0,0,0,0,0,0,9,2,2,9, 0,  0,0,0,0,0,0,0,0,0,0,0,9,2,2,2, 0,  2,2,2,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,
0, 2,2,2,2,2,2,2,2,2,2,2,2,2,2,0, 0,  2,2,2,2,2,2,2,2,2,2,2,2,2,2,9, 0,  2,2,2,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,
0, 2,2,2,2,2,2,2,2,2,2,2,2,9,0,0, 0,  2,2,2,2,2,2,2,2,2,2,2,2,2,9,0, 0,  2,2,2,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,

0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,
0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, 0,0,
0, 2,2,2,2,2,2,2,2,2,2,2,2,2,2,2, 2,  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2, 2,  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2, 0,0,

};

SDL_Surface *make_surface_from_sprite(int w, int h, const uint8_t *sprite, const SDL_Color colormap[])
{
    SDL_Surface *surface = SDL_CreateRGBSurfaceWithFormat(0, w, h, 32, SDL_PIXELFORMAT_RGBA32);
    if (!surface)
        return nullptr;

    if (SDL_LockSurface(surface) == -1) {
        SDL_FreeSurface(surface);
        return nullptr;
    }

    uint8_t *pixels = reinterpret_cast<uint8_t *>(surface->pixels);
    int pitch = surface->pitch;

    for (int x = 0; x < w; ++x) {
        for (int y = 0; y < h; ++y) {
            uint8_t *dst = pixels + x * 4 + y * pitch;
            const SDL_Color src = colormap[sprite[x + y * Width]];
            dst[0] = src.r;
            dst[1] = src.g;
            dst[2] = src.b;
            dst[3] = src.a;
        }
    }

    SDL_UnlockSurface(surface);
    return surface;
}

int main()
{
    std::vector<SDL_Color> colormap(32);

    if (1) {
        colormap[0] = {0x00, 0x00, 0x00, 0xff};
        colormap[2] = {0xff, 0xff, 0xff, 0xff};
        colormap[3] = {0x99, 0x99, 0x99, 0xff};
        colormap[9] = {0xcc, 0xcc, 0xcc, 0xff};
    }
    else {
        colormap[0] = {0x00, 0x00, 0x00, 0xff};
        colormap[2] = {0x77, 0xaa, 0xff, 0xff};
        colormap[3] = {0x44, 0x66, 0x99, 0xff};
        colormap[9] = {0x66, 0x99, 0xdd, 0xff};
    }

    SDL_Surface *surface = make_surface_from_sprite(Width, Height, Sprite, colormap.data());
    if (!surface)
        return 1;

    SDL_SaveBMP(surface, "sprite.bmp");

    return 0;
}
